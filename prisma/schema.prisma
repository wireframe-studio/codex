generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ------------------

model User {
  id            String  @id
  name          String
  email         String
  emailVerified Boolean @default(false)
  image         String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  sessions  Session[]
  accounts  Account[]

  Articles Article[]    @relation("UserToArticle")
  Sites    UserToSite[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

// ------------------

model Site {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name       String
  webhookUrl String?
  apiKey     String? @unique

  Users UserToSite[]
}

model UserToSite {
  userId String
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  siteId String
  Site   Site   @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@id([userId, siteId])
  @@unique([userId, siteId])
  @@map("user_to_site")
}

// ------------------

model Article {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  coverImageId String?   @unique
  CoverImage   S3Object? @relation(fields: [coverImageId], references: [id], name: "ArticleToCoverImage")

  backgroundImageId String?   @unique
  BackgroundImage   S3Object? @relation(fields: [backgroundImageId], references: [id], name: "ArticleToBackgroundImage")

  title       String    @default("New Article")
  slug        String?   @unique
  description String?
  date        DateTime? @default(now())

  tags String[]
  type ArticleType? @default(BLOG)

  companyVisibility Boolean @default(false)
  published         Boolean @default(false)

  views     Int @default(0)
  reactions Int @default(0)

  content Json?

  Authors User[]     @relation("UserToArticle")
  Files   S3Object[] @relation("ArticleToFile")

  seriesParentArticleId String?  @unique
  SeriesParentArticle   Article? @relation(fields: [seriesParentArticleId], references: [id], name: "ArticleToSeriesArticle")

  SeriesArticles Article[] @relation(name: "ArticleToSeriesArticle")
}

enum ArticleType {
  BLOG
  CASE_STUDY
  SHOWCASE
  SERIES_OVERVIEW
}

// ------------------

model S3Object {
  id          String @id @default(cuid())
  key         String
  contentType String
  size        Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Articles Article[] @relation("ArticleToFile")

  ArticleCoverImage      Article? @relation("ArticleToCoverImage")
  ArticleBackgroundImage Article? @relation("ArticleToBackgroundImage")
}

// ------------------

model KV {
  key   String @id
  value String
}
